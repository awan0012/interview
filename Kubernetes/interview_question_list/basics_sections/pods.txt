## Pods

## Pods

1. How do you define a pod in Kubernetes?
   A pod is defined using a YAML or JSON file that specifies its configuration. Here's a basic example:

   ```yaml
   apiVersion: v1
   kind: Pod
   metadata:
     name: my-pod
   spec:
     containers:
     - name: my-container
       image: nginx:latest
       ports:
       - containerPort: 80


This definition creates a pod named "my-pod" with a single container running the latest Nginx image, exposing port 80.

2.What are the key characteristics of a pod? Key characteristics of a pod include:

  Smallest deployable unit in Kubernetes
  Contains one or more containers
  Shares the same network namespace (IP address and port space)
  Shares the same storage volumes
  Has a unique IP address within the cluster
  Ephemeral by nature (can be easily created and destroyed)
  Scheduled on nodes as a unit

3.Explain the lifecycle of a pod in Kubernetes. 
  The pod lifecycle includes the following phases:

  Pending: Pod is accepted but not yet scheduled on a node
  Running: Pod is scheduled on a node and all containers are created
  Succeeded: All containers in the pod have terminated successfully
  Failed: All containers have terminated, and at least one container has failed
  Unknown: The state of the pod cannot be determined Additionally, pods go through various conditions like PodScheduled, Initialized, ContainersReady, and Ready.

4.What is the difference between a pod and a container? 
  Key differences:

  A pod can contain multiple containers, while a container is a single instance of an application
  Pods provide a shared execution environment (network, storage) for containers
  Pods are scheduled and managed by Kubernetes, while containers are managed by a container runtime (e.g., Docker)
  Pods have a lifecycle managed by Kubernetes, while container lifecycle is managed within the pod

5.How do you restart a pod in Kubernetes? 
  To restart a pod:

  Delete the pod: kubectl delete pod <pod-name>
  Kubernetes will automatically recreate the pod if it's managed by a controller (e.g., Deployment) Alternatively:
  Scale down the deployment to 0 and then back up
  Use kubectl rollout restart deployment <deployment-name>
  Update an environment variable or label to trigger a rolling update

6.What is a multi-container pod, and when would you use it? 
  A multi-container pod is a pod that contains more than one container. Use cases include:

  Sidecar pattern: Adding functionality to a main container (e.g., log shipping)
  Ambassador pattern: Proxying connections to the main container
  Adapter pattern: Transforming output of the main container
  Init containers: Performing setup tasks before the main container starts

7.How do you create a pod using a YAML file?

  Create a YAML file with the pod definition
  Use the command: kubectl apply -f <pod-definition.yaml> Example:
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: nginx:latest


Save this as my-pod.yaml and run kubectl apply -f my-pod.yaml

8.What is an init container, and how does it differ from a regular container? 
  An init container:

  Runs and completes before the app containers are started
  Can contain utilities or setup scripts not present in the app image
  Runs sequentially, while app containers run in parallel
  Has separate resource limits from app containers
  Is useful for tasks like database schema creation or dependency checks

9.How do you expose a pod to the external world? 
  
  Methods to expose a pod:

  Create a Service of type NodePort or LoadBalancer
  Use an Ingress resource
  Use port forwarding for debugging: kubectl port-forward pod/<pod-name> 8080:80
  Use a hostPort in the pod specification (not recommended for production)

10.What are pod labels, and how are they used? 
   Pod labels are key-value pairs attached to pods. They are used for:

   Organizing and selecting subsets of objects
   Associating pods with Services
   Applying configurations to groups of pods
   Scheduling pods on specific nodes Example:
metadata:
  labels:
    app: myapp
    environment: production

Labels can be selected using label selectors in various Kubernetes resources.
# Kubernetes Services
