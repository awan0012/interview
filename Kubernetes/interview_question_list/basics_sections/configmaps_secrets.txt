# Kubernetes ConfigMaps & Secrets

1. What is a ConfigMap in Kubernetes?
   A ConfigMap is an API object used to store non-confidential data in key-value pairs. It allows you to decouple configuration artifacts from image content to keep containerized applications portable.

2. How do you create a ConfigMap in Kubernetes?
   You can create a ConfigMap using the kubectl create configmap command or by defining it in a YAML file and applying it with kubectl apply -f. For example:
   kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2

3. How do you inject a ConfigMap into a pod?
   You can inject a ConfigMap into a pod as environment variables or as files in a volume. In the pod specification, you reference the ConfigMap under the env or volumes section.

4. What is a Kubernetes Secret?
   A Secret is an object that contains a small amount of sensitive data such as a password, a token, or a key. It's similar to a ConfigMap but is specifically intended for confidential data.

5. How do you create a Secret in Kubernetes?
   You can create a Secret using the kubectl create secret command or by defining it in a YAML file. For example:
   kubectl create secret generic my-secret --from-literal=username=admin --from-literal=password=t0p-Secret

6. How do you mount a Secret as a file in a pod?
   You can mount a Secret as a file in a pod by defining a volume of type secret in the pod specification and then mounting that volume to a container.

7. What are the different types of Secrets in Kubernetes?
   Kubernetes supports several built-in types of Secrets:
   - Opaque (generic)
   - kubernetes.io/service-account-token
   - kubernetes.io/dockercfg
   - kubernetes.io/dockerconfigjson
   - kubernetes.io/basic-auth
   - kubernetes.io/ssh-auth
   - kubernetes.io/tls

8. How do you encrypt Secrets in Kubernetes?
   Kubernetes supports encryption at rest for Secrets. You can configure encryption providers in the kube-apiserver configuration file to encrypt Secret data before storing it in etcd.

9. What are the best practices for managing Secrets in Kubernetes?
   Best practices include:
   - Use RBAC to control access to Secrets
   - Enable encryption at rest
   - Regularly rotate Secrets
   - Use external secret management systems for production environments
   - Avoid committing Secrets to version control

10. How do you update a ConfigMap or Secret in a running pod?
    Updating a ConfigMap or Secret doesn't automatically update the pod. You need to restart the pod or use a tool like Reloader to trigger a rolling update when ConfigMaps or Secrets change.

# Kubernetes Volumes & Persistent Storage
